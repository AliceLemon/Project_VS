"""
Stanford Code in Place Project.
This program tells you how many days you have lived so far and 
how many days on average you still have to learn programming according to 
your birthdate, your country and your gender.
Don't run this programme if you are less then 3 years old, please!
The programme uses Life Expectancy at birth data assuming it is valid for all users.
Data source: https://www.worldometers.info/demographics/life-expectancy/  
Life expectancy at birth is defined as how long, on average, a new born
can expect to live, if current death rates do not change. 
The data was copied inside the program in 3 different lists.
"""

# lists (the data):
country = ["afghanistan","albania","algeria","angola","antigua and barbuda","argentina","armenia","aruba",
           "australia","austria","azerbaijan","bahamas","bahrain","bangladesh","barbados","belarus","belgium",
           "belize","benin","bhutan","bolivia","bosnia and herzegovina","botswana","brazil","brunei",
           "bulgaria","burkina faso","burundi","cabo verde","cambodia","cameroon","canada",
           "central african republic","chad","chile","china","colombia","comoros","congo",
           "costa rica","croatia","cuba","curaÃ§ao","cyprus","czech republic","cote d'ivoire",
           "denmark","djibouti","dominican republic","dr congo","ecuador","egypt","el salvador",
           "equatorial guinea","eritrea","estonia","eswatini","ethiopia","fiji","finland","france",
           "french guiana","french polynesia","gabon","gambia","georgia","germany","ghana","greece",
           "grenada","guadeloupe","guam","guatemala","guinea","guinea-bissau","guyana","haiti","honduras",
           "hong kong","hungary","iceland","india","indonesia","iran","iraq","ireland","israel","italy",
           "jamaica","japan","jordan","kazakhstan","kenya","kiribati","kuwait","kyrgyzstan","laos","latvia",
           "lebanon","lesotho","liberia","libya","lithuania","luxembourg","macao","madagascar","malawi",
           "malaysia","maldives","mali","malta","martinique","mauritania","mauritius","mayotte","mexico",
           "micronesia","moldova","mongolia","montenegro","morocco","mozambique","myanmar","namibia","nepal",
           "netherlands","new caledonia","new zealand","nicaragua","niger","nigeria","north korea",
           "north macedonia","norway","oman","pakistan","panama","papua new guinea","paraguay","peru",
           "philippines","poland","portugal","puerto rico","qatar","romania","russia","rwanda","reunion",
           "saint lucia","samoa","sao tome e principe","saudi arabia","senegal","serbia","seychelles",
           "sierra leone","singapore","slovakia","slovenia","solomon islands","somalia","south africa",
           "south korea","south sudan","spain","sri lanka","st vincent and grenadines","state of palestine",
           "sudan","suriname","sweden","switzerland","syria","taiwan","tajikistan","tanzania","thailand",
           "timor-leste","togo","tonga,","trinidad and tobago","tunisia","turkey","turkmenistan",
           "virgin islands","uganda","ukraine","united arab emirates","united kingdom","united states",
           "uruguay","uzbekistan","vanuatu","venezuela","vietnam","western sahara","yemen","zambia","zimbabwe"]
female =[67.44, 80.54, 78.67, 65.77, 81.8, 81.26, 80.36, 79.62, 85.56, 84.72, 76.39, 77.97, 81.92, 76.31,
         79.74, 79.98, 84.5, 77.89, 62.16, 74.45, 71.46, 78.3, 68.56, 79.26, 76.78, 76.37, 62.39, 64.45,
        80.9, 73.75, 63.47, 84.94, 57.68, 55.41, 83.41, 81.52, 80.4, 67.35, 64.86, 82.66, 82.14, 80.73,
        80.42, 83.81, 82.58, 61.46, 83.92, 66.3, 77.72, 62.78, 80.65, 73.22, 77.55, 64.02, 69.4, 83.11,
        61.86, 69.75, 70.41, 85, 86.08, 80.48, 86.1, 68.76, 65.63, 77.24, 84.44, 66.72, 84.44, 78.45,
        86.43, 82.2, 73.09, 60.83, 62.62, 73.33, 67.82, 76.02, 88.66, 80.27, 84.41, 73.65, 73.27,
        79.84, 74.03, 84.54, 85.1, 86.13, 74.6, 87.97, 77.46, 73.9, 65.83, 69.59, 82.91, 75.5, 71.46, 
        80.2, 78.09, 57.82, 63.34, 76.54, 81.16, 84.89, 88.11, 68.84, 67.15,78.96, 82.06, 61.41, 85.83,
        86.09, 67.33, 78.73, 81.46, 78.36, 75.97, 74.21, 77.62, 80.82, 77.41, 65.15, 70.69, 63.13, 
        72.68, 84.02, 84.74, 84.84, 77.74, 64.26, 54.24, 76.3, 77.47, 85.17, 80.77, 69.74, 81.59, 
        69.34, 76.96, 79.26, 74.32, 82.26, 85.06, 84.04, 83.25, 78.6, 79.29, 69.49, 85.52, 77.68, 75.5,
        72.04, 79.73, 71.75, 78.02, 79.36, 62.11, 86.42, 81.59, 84.75, 72.51, 59.47, 65.69, 87.23, 57.97,
        86.68, 80.39, 73.08, 76.67, 68.7, 76.25, 85.22, 86.05, 76.27, 84.68, 73.69, 69.8, 84.08, 71.1, 
        62.49, 74.29, 78.31, 80.18, 81.67, 73.07, 81.69, 65.93, 78.08, 82.57, 83.97, 82.23, 81.82, 74.43,
        73.28, 77.25, 79.42, 73.34, 68.08, 65.67, 64.32]
male = [61.2, 75.83, 76.05, 60.72, 76.71, 74.62, 71.16, 73.95, 81.89, 80.35, 70.67, 70.89, 79.68, 71.78,
    75.83, 69.81, 80.36, 71.7, 58.77, 70.8, 66.2, 74.05, 63.45, 73.07, 72.49, 69.55, 58.67, 60.54, 72.57,
    69.09, 60.39, 81.07, 53.38, 52.01, 78.84, 76.18, 74.61, 62.91, 61.69, 77.92, 76.61, 75.97, 72.88, 80.26,
    77.02, 58.86, 80.14, 61.23, 71.24, 58.54, 75.51, 68.48, 68.88, 60.23, 65.17, 75.2, 53.98, 63.73, 66.58,
    80.01, 80.5, 74.94, 81.49, 63.87, 62.62, 67.56, 79.9, 62.37, 79.58, 72.74, 79.68, 75.06, 67.26, 58.18,
    58.38, 66.36, 61.81, 71.03, 83, 73.76, 81.55, 70.52, 68.96, 74.28, 69.92, 81.21, 81.59, 82.15, 70.14,
    81.91, 72.91, 66.58, 60.95, 65.88, 79.09, 66.88, 67.19, 71.66, 73.97, 52.12, 60.73, 70.23, 72.35, 80.64,
    82.88, 64.14, 60.24, 74.11, 80.3, 58.7, 81.81, 80.44, 63.64, 72.77, 74.73, 71.76, 70, 65.05, 68.36, 74.61,
    73.11, 59.48, 64.38, 55.98, 68.87, 81.1, 77.76, 81.43, 71.8, 61.65, 53.51, 71.1, 73.1, 81.91, 77.45, 65.08,
    75.62, 63.51, 71.37, 74.69, 70.3, 74.89, 79.53, 75.83, 80.81, 71.73, 69.52, 65.02, 79.95, 70.74, 70.29,
    66.13, 76.87, 66.71, 72.3, 71.31, 59.46, 82.13, 75.04, 79.86, 69.38, 55.32, 59.85, 80.83, 54.99, 81.35,
    73.06, 67.92, 71.91, 63.57, 69.42, 82.08, 82.63, 68.82, 78.36, 69.3, 65.46, 75.75, 67.67, 61.14, 68.69,
    71.48, 73.86, 75.62, 66.04, 70.72, 61.68, 67.74, 79.02, 80.61, 77.27, 74.34, 69.12, 68.48, 68.76, 70.12,
    69.51, 61.23, 60.19, 59.18]

# Welcome message
print("")
print("Hello! Would you like to know how many days you'll have on average to learn programming?")
print("")

# User's data validation:
while True:
    try:
        u_day=int(input("Please enter the day you were born: "))
        if u_day>0 and u_day<32:
            break
        else:
            print("This is not a valid day!")    
    except:
        print("This is not a valid number!")
    
while True:
    try:
        u_month=int(input("Please enter the month you were born as a number: "))
        if u_month>0 and u_month<13:
            break
        else:
            print("This is not a valid month!")
    except:
        print("This is not a valid number!")  

while True:
    try:
        u_year=int(input("Please enter the year you were born: "))
        if u_year>1900 and u_year<2022:
            break
        else:
            print("This is not a valid year!")
    except:
        print("This is not a valid number!")   

while True:
    try: 
        u_country= input ("In which country do you live? ")
        u_country=u_country.lower() #converts the country to lower case
        if u_country in country:
            break
    except:
        print("Sorry, this country is not included.")

while True:
    try:
        u_gender= input("What's your gender? Please enter M or F: ")
        u_gender=u_gender.upper() #converts the gender to upper case
        if u_gender=='F' or u_gender=='M':
            break
        else:
            print("Please enter M or F:")
    except:
        print("Please enter M or F:") 

print("")

#today's date
from datetime import date
today = date.today()
#print (today)
t_day= today.day
t_month= today.month
t_year= today.year
#print(t_day, t_month, t_year)

#Check leap year
def is_year_leap(year):
	if year % 4 != 0:
		return False
	elif year % 100 != 0:
		return True
	elif year % 400 != 0:
		return False
	else:
		return True

## FIRST PART: Counts the number of days the user has lived until today:

#counts the number of days from the year after birthdate until the year before today's date :
NR_DAYS_LEAP = 366
NR_DAYS=365

def get_days_from_u_years():
	days_u_year=0
	for i in range (u_year+1, t_year):
		if is_year_leap(i):
			days_u_year += NR_DAYS_LEAP
		else:
			days_u_year += NR_DAYS
	return days_u_year


#counts the number of days from the month after birthdate until the end of birthdate year:
days_a_month=[31,28,31,30,31,30,31,31,30,31,30,31]
def get_days_from_u_month_before():
	K= len(days_a_month)-u_month
	days_u_month_before= sum(days_a_month[-K:])
	if u_month == 1:
		if is_year_leap (u_year):
			days_u_month_before +=1		
	return days_u_month_before
	
# counts the number of days from 1stJanuary until one month before today's date:
def get_days_from_u_month_after():
	K= len(days_a_month)-t_month+1
	days_u_month_after= sum(days_a_month[:-K])
	if t_month > 2:
		if is_year_leap (t_year):
			days_u_month_after +=1
	return days_u_month_after


#counts the number of days from 1st day of the month of birth until the birthday:
def get_days_from_u_day_before():
    u_days_before= u_day
    return u_days_before

	  
#counts the number of days from 1st day of today's month until and including today's day:
def get_days_from_u_day_after():
    t_days_after= t_day
    return t_days_after
	
days_up_until_today= get_days_from_u_years() + get_days_from_u_month_before() + get_days_from_u_month_after()+ get_days_from_u_day_before()+ get_days_from_u_day_after()


## SECOND PART: Counts Life Expectancy at birth in days:


# gets from lists (the data) the life expectancy from user according to country and gender:
if u_gender == "F":
    expectancy= female[country.index(u_country)]
else:
    expectancy=male[country.index(u_country)]

#leap years estimation:
AVG_DAYS_A_MONTH= 30.4583  #As years are different for each user, we assume an average days per month:

exp_nr_of_leap_years_estimation=expectancy/4
exp_nr_of_years_no_leap=expectancy-exp_nr_of_leap_years_estimation
exp_nr_of_months= (exp_nr_of_years_no_leap- int(exp_nr_of_years_no_leap))*12
exp_nr_of_days= (exp_nr_of_months- int(exp_nr_of_months))*AVG_DAYS_A_MONTH

exp_total_days= round((round(exp_nr_of_leap_years_estimation)*NR_DAYS_LEAP)+(round(exp_nr_of_years_no_leap)*NR_DAYS)\
   +(round(exp_nr_of_months)*AVG_DAYS_A_MONTH)+ exp_nr_of_days)


# Calculate number of years from today until the end according to life expectancy:
programming_days= exp_total_days - days_up_until_today


## LAST PART: output the info in the terminal:


print(" -You have lived", days_up_until_today, "days.")
print(" -You have on average", programming_days,"days to learn programming!(according to Life Expectancy\
at birth's data). Please bear in mind that these are just statistics!")
print("")
